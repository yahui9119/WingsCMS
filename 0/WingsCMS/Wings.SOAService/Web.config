<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    <section name="wingsConfigurationSection" type="Wings.Framework.Config.WingsConfigurationSection, Wings.Framework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
  </configSections>

  <!--BEGIN: Unity-->

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
    <container>
      <extension type="Interception" />
      <!--Cache Provider-->
      <register type="Wings.Framework.Caching.ICacheProvider, Wings.Framework" mapTo="Wings.Framework.Caching.EntLibCacheProvider, Wings.Framework" />
      <!--Repository Context & Repositories-->

      <!--Entity Framework-->
      <register type="Wings.Domain.Repositories.IRepositoryContext, Wings.Domain"
                    mapTo="Wings.Domain.Repositories.EntityFramework.EntityFrameworkRepositoryContext, Wings.Domain.Repositories">
        <lifetime type="Wings.Framework.UnityExtensions.UnityOperationContextLifetimeManager, Wings.Framework" />
        <!--生命周期-->
      </register>

      <register type="Wings.Domain.Repositories.IActionRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.ActionRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IGroupRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.GroupRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IModuleRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.ModuleRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IRoleRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.RoleRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IUserOnlineRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.UserOnlineRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IUserRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.UserRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IRoleRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.RoleRepository, Wings.Domain.Repositories" />
      <register type="Wings.Domain.Repositories.IWebRepository, Wings.Domain"
                mapTo="Wings.Domain.Repositories.EntityFramework.WebRepository, Wings.Domain.Repositories" />

      <!--Domain Services-->
      <register type="Wings.Domain.Services.IDomainService, Wings.Domain" mapTo="Wings.Domain.Services.DomainService, Wings.Domain" />
      <!--Service Implementations-->
      <register type="Wings.Contracts.IUserService, Wings.Contracts" mapTo="Wings.Core.Implementation.UserServiceImpl,Wings.Core">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="Wings.Framework.InterceptionBehaviors.CachingBehavior, Wings.Framework" />
        <interceptionBehavior type="Wings.Framework.InterceptionBehaviors.ExceptionLoggingBehavior, Wings.Framework" />
      </register>
      <register type="Wings.Contracts.IWebService, Wings.Contracts" mapTo="Wings.Core.Implementation.WebServiceImpl,Wings.Core">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="Wings.Framework.InterceptionBehaviors.CachingBehavior, Wings.Framework" />
        <interceptionBehavior type="Wings.Framework.InterceptionBehaviors.ExceptionLoggingBehavior, Wings.Framework" />
      </register>
      <register type="Wings.Framework.Plugin.Contracts.IPluginService, Wings.Framework" mapTo="Wings.Core.Implementation.PluginServiceImpl,Wings.Core">
        <!--<interceptor type="InterfaceInterceptor" />-->
        <!--<interceptionBehavior type="Wings.Framework.InterceptionBehaviors.CachingBehavior, Wings.Framework" />
        <interceptionBehavior type="Wings.Framework.InterceptionBehaviors.ExceptionLoggingBehavior, Wings.Framework" />-->
      </register>
      <!--领域事件 句柄-->
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserEnabledEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserEnabledEventHandlers, Wings.Domain" name="UserEnabledEventHandlers" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserForbiddenEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserForbinddenEventHandlers, Wings.Domain" name="UserForbinddenEventHandlers" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserGroupUpdateEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserGroupUpdateEventHandler, Wings.Domain" name="UserGroupUpdateEventHandler" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserOfflineEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserOfflineEventHandler, Wings.Domain" name="UserOfflineEventHandler" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserOnlineEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserOnlineEventHandler, Wings.Domain" name="UserOnlineEventHandler" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserRoleUpdateEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserRoleUpdateEventHandler, Wings.Domain" name="UserRoleUpdateEventHandler" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserUpdateModuleEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserUpdateModuleEventHandler, Wings.Domain" name="UserUpdateModuleEventHandler" />
      <register type="Wings.Domain.Events.IDomainEventHandler`1[[Wings.Domain.Events.UserWebUpdateEvent, Wings.Domain]], Wings.Domain" mapTo="Wings.Domain.Events.Handlers.UserWebUpdateEventHandler, Wings.Domain" name="UserWebUpdateEventHandler" />

      <!--Event Handlers-->
      <register name="UserForbiddenEventSendEmailHandler" type="Wings.Events.IEventHandler`1[[Wings.Domain.Events.UserForbiddenEvent, Wings.Domain]], Wings.Events" mapTo="Wings.Events.Handlers.SendEmailHandler, Wings.Events.Handlers" />
      <!--Event Aggregator-->
      <register type="Wings.Events.IEventAggregator, Wings.Events" mapTo="Wings.Events.EventAggregator, Wings.Events">
        <constructor>
          <param name="handlers">
            <array>
              <dependency name="UserForbiddenEventSendEmailHandler" type="Wings.Events.IEventHandler`1[[Wings.Domain.Events.UserForbiddenEvent, Wings.Domain]], Wings.Events" />
            </array>
          </param>
        </constructor>
      </register>
      <!--Event Bus-->
      <register type="Wings.Events.Bus.IEventBus, Wings.Events" mapTo="Wings.Events.Bus.EventBus, Wings.Events">
        <lifetime type="Wings.Framework.UnityExtensions.UnityOperationContextLifetimeManager, Wings.Framework" />
      </register>
    </container>
  </unity>
  <!--END: Unity-->
  <!--BEGIN: log4net-->
  <log4net>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <param name="File" value="Log\\" />
      <param name="AppendToFile" value="true" />
      <param name="MaxFileSize" value="10240" />
      <param name="StaticLogFileName" value="false" />
      <!--是否续写-->
      <!--最小锁定模型以允许多个进程可以写入同一个文件-->
      <param name="LockingModel" value="log4net.Appender.FileAppender.MinimalLock" />
      <!--保存路径-->
      <!--
      <param name="File" value="Log\\"/>-->
      <param name="DatePattern" value="yyyy-MM-dd.LOG" />
      <param name="StaticLogFileName" value="false" />
      <param name="RollingStyle" value="Date" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="时间:%d %n级别:%level %n类名:%c%n文件:%F 第%L行%n [%t] %n 日志内容:%m%n-----------------------------------------%n%n" />
      </layout>
    </appender>
    <logger name="Wings.Logger">
      <level value="ERROR" />
      <level value="INFO" />
      <appender-ref ref="RollingFileAppender" />
    </logger>
  </log4net>
  <!--END: log4net-->
  <!--BEGIN: Caching-->
  <cachingConfiguration defaultCacheManager="WingsCacheManager">
    <cacheManagers>
      <add name="WingsCacheManager" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="600" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
    </cacheManagers>
    <backingStores>
      <add type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="NullBackingStore" />
    </backingStores>
  </cachingConfiguration>
  <!--END: Caching-->
  <!--BEGIN: Wings Configuration-->
  <wingsConfigurationSection xmlns="urn:Wings.Framework.Config">
    <!--
		This is just a minimal sample configuration file that shows how to declare
		the configuration sections.

		Because an XML Schema Definition (XSD) is generated for each configuration
		section, it should be trivial to edit these files because you have
		IntelliSense on the XML definition.
		-->
    <emailClient host="smtp.163.com" port="25" userName="servermessage" password="1qaz@WSX3edc$RFV" enableSsl="false" sender="Wings" />
  </wingsConfigurationSection>
  <!--END: Wings Configuration-->
  <!--
    有关 .NET 4.5 的 web.config 更改的说明，请参见 http://go.microsoft.com/fwlink/?LinkId=235367。

    可在 <httpRuntime> 标记上设置以下特性。
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
  -->
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <pages controlRenderingCompatibilityVersion="4.0" />
  </system.web>
  <system.serviceModel>


    <bindings>
      <wsDualHttpBinding>
        <binding name="SecureMessage" >
          <security mode="None" >
            <message clientCredentialType="UserName" />
          </security>
        </binding>
      </wsDualHttpBinding>
    </bindings>
    <services>
      <service name="Wings.SOAService.PluginService">
        <endpoint address="/svc/PluginService" binding="wsDualHttpBinding"
          bindingConfiguration="SecureMessage" name="PluginService" contract="Wings.Framework.Plugin.Contracts.IPluginService" />
      </service>
    </services>
    <extensions>
      <behaviorExtensions>
        <add name="unity" type="Wings.Framework.UnityExtensions.UnityBehaviorExtensionElement,Wings.Framework,  Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
      </behaviorExtensions>
    </extensions>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <serviceMetadata httpGetEnabled="true"/>
          <unity operationContextEnabled="true" instanceContextEnabled="true"
            serviceHostBaseEnabled="true" contextChannelEnabled="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
    <!--
        若要在调试过程中浏览 Web 应用程序根目录，请将下面的值设置为 True。
        在部署之前将该值设置为 False 可避免泄露 Web 应用程序文件夹信息。
      -->
    <directoryBrowse enabled="true" />
  </system.webServer>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="Data Source=.; Integrated Security=True; MultipleActiveResultSets=True;" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Interception" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.ServiceLocation" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.0.0" newVersion="1.2.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.EnterpriseLibrary.Common" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.414.0" newVersion="5.0.414.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>